## Hashing

Hashing passwords essentially means that we're converting the user's password into another
string, which is one-way, and practically impossible to reverse.
To include additional security, it will then salt that string with random data, making
it even tougher to crack.


The username matches that of what I signed-up with, but if you notice, the password is a
rather long bunch of random data.
Since we used the standard password hashing from Werkzeug, it's applied a normal SHA256
method, which is just one way to salt a hashed password.


^ start $ end of string


cp templates/register.html templates/login.html -- to copy content to a new file


If you have something on your form like a multi-select dropdown list, that can be an
array of items, then you would use: 'request.form.getlist()' instead.
This would be helpful if you're grabbing multiple elements with the same name="" attribute,
such as various ingredients from a recipe for example.

Using admin for access to manage categories:
Otherwise, if a user is not currently in session, then they can only log-in or register.
If you plan on using a similar approach to restrict certain pages to an Admin, a better
approach would actually be to include an additional key-value pair.
Similar to our toggle switch for being urgent, you could include one for 'is_admin' or 'is_superuser'.
That way, you could eventually have more than one Admin or SuperUser, not relying purely
on the username itself.


On validation:
Also, in production mode, you'll actually want to provide conditional checks on your
Python functions to restrict these pages, but redirect users elsewhere if they're not
validated.


Creat an index in Mongo DB:
Within MongoDB, you can create a Text Index directly on the database using this tab (Indexes).
You would click 'Create Index', and then fill-in the required fields.


Create search bar:
Everything from our database is in this 'mongo' variable, so we need to import that in order
to create our Search Index.
It's very important to note, that you can only have one Text Index on your collection,
but it can be applied to different fields.

in terminal:
  from app import mongo
  mongo.db.tasks.create_index([("task_name", "text"), ("task_description", "text")])

  drop index - mongo db - to delete an index or:
  If we wanted to drop, or delete the Index within Python, we'd use the .drop_index()
  method, specifying the Index name to drop.
  Alternatively, you can drop all Indexes by using the .drop_indexes() method.

  mongo.db.tasks.index_information() -- to see the info of the index details
  mongo.db.tasks.drop_index('task_name_text_task_description_text') -- del the index
  mongo.db.tasks.drop_indexes() -- del all indexes

  quit() to exit